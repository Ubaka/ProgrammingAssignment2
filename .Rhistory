m1 <- matrix(c(5/8,-1/8,-7/8,3/8),2,2)
m1
d <- m1
inv_mat <- makeCacheMatrix(d)
inv_mat$cacheSolve()
cacheSolve(d)
makeCacheMatrix <- function(x = matrix()){
Inv_Mat <- NULL
set <- function(y) {
x <<- y
Inv_Mat <<- NULL
}
get <- function() x
setinverse <- function(inverse) Inv_Mat <<- inverse
getinverse <- function()Inv_Mat
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
makeCacheMatrix
cacheSolve <- function(x, ...) {
Inv_Mat <- x$getinverse()
if(!is.null(Inv_Mat)){
## Return a matrix that is the inverse of 'x'
return(Inv_mat)
}
data <- x$get()
Inv_Mat <- solve(data,...)
x$setinverse(Inv_Mat)
Inv_Mat
}
cacheSolve
makeCacheMatrix <- function(x = matrix()){
Inv_Mat <- NULL
set <- function(y) {
x <<- y
Inv_Mat <<- NULL
}
get <- function() x
setinverse <- function(inverse) Inv_Mat <<- inverse
getinverse <- function()Inv_Mat
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
## Write a short comment describing this function
## The cachesolve Function calculates the inverse of a matrix.
## Return a matrix that is the inverse of 'x'
cacheSolve <- function(x, ...) {
Inv_Mat <- x$getinverse()
if(!is.null(Inv_Mat)){
return(Inv_mat)
}
data <- x$get()
Inv_Mat <- solve(data,...)
x$setinverse(Inv_Mat)
Inv_Mat
}
m1 <- matrix(c(5/8,-1/8,-7/8,3/8),2,2)
m1
d
d <- m1
solve(m1)
cacheSolve <- function(x, ...)
cacheSolve <- function(x, ...) {
Inv_Mat <- x$getinverse()
if(!is.null(Inv_Mat)){
cacheSolve <- function(x, ...) {
Inv_Mat <- x$getinverse()
if(!is.null(Inv_Mat)){
return(Inv_mat)
}
data <- x$get()
Inv_Mat <- solve(data,...)
x$setinverse(Inv_Mat)
Inv_Mat
}
makeCacheMatrix <- function(x = matrix()){
Inv_Mat <- NULL
set <- function(y) {
x <<- y
Inv_Mat <<- NULL
}
get <- function() x
setinverse <- function(inverse) Inv_Mat <<- inverse
getinverse <- function()Inv_Mat
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
cacheSolve <- function(x, ...) {
Inv_Mat <- x$getinverse()
if(!is.null(Inv_Mat)){
return(Inv_mat)
}
data <- x$get()
Inv_Mat <- solve(data,...)
x$setinverse(Inv_Mat)
Inv_Mat
}
cacheSolve <- function(x, ...) {
Inv_Mat <- x$getinverse()
if(!is.null(Inv_Mat)){
message("getting cached data")
return(Inv_mat)
}
data <- x$get()
Inv_Mat <- solve(data,...)
x$setinverse(Inv_Mat)
Inv_Mat
}
Inv_Mat
cacheSolve
